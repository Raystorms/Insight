using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Linq;
using UnityEngine;

namespace Insight
{
    public class ProcessSpawner : InsightModule
    {
        [HideInInspector] public InsightServer server;
        [HideInInspector] public InsightClient client;

        [Header("Network")]
        [Tooltip("NetworkAddress that spawned processes will use")]
        public string SpawnerNetworkAddress = "localhost";
        [Tooltip("Port that will be used by the NetworkManager in the spawned game")]
        public int StartingNetworkPort = 7777; //Default port of the NetworkManager. 
        private int _portCounter;

        [Header("Paths")]
        public string EditorPath;
        public string ProcessPath;
        public string ProcessName;

        [Header("Threads")]
        public int MaximumProcesses = 5;

        private bool registrationComplete;

        public List<RunningProcessStruct> spawnerProcesses = new List<RunningProcessStruct>();

        public override void Initialize(InsightServer server, ModuleManager manager)
        {
            this.server = server;
            RegisterHandlers();
        }

        public override void Initialize(InsightClient client, ModuleManager manager)
        {
            this.client = client;
            RegisterHandlers();
        }

        void Start()
        {
#if UNITY_EDITOR
            ProcessPath = EditorPath;
#endif
        }

        void Update()
        {
            //Used only if acting as a ChildSpawner under a MasterServer
            if (client && !registrationComplete)
            {
                if (client.isConnected)
                {
                    UnityEngine.Debug.LogWarning("[ProcessSpawner] - Registering to Master");
                    client.Send((short)MsgId.RegisterSpawner, new RegisterSpawnerMsg()
                    {
                        UniqueID = "",
                        MaxThreads = MaximumProcesses
                    }); //Can provide a password to authenticate to the master as a trusted spawner
                    registrationComplete = true;
                }
            }

            CheckSpawnedProcessHealth();
        }

        void RegisterHandlers()
        {
            if (client)
            {
                client.RegisterHandler((short)MsgId.RequestSpawnStart, HandleRequestSpawnStart);
                client.RegisterHandler((short)MsgId.KillSpawn, HandleKillSpawn);
            }
            if (server)
            {
                server.RegisterHandler((short)MsgId.RequestSpawnStart, HandleRequestSpawnStart);
                server.RegisterHandler((short)MsgId.KillSpawn, HandleKillSpawn);
            }
        }

        private void HandleRequestSpawnStart(InsightNetworkMessage netMsg)
        {
            RequestSpawnStartMsg message = netMsg.ReadMessage<RequestSpawnStartMsg>();

            //Try to start the new process
            if (!InternalStartNewProcess(message))
            {
                netMsg.Reply((short)MsgId.Error, new ErrorMsg() { Text = "[ProcessSpawner] - Spawn failed" });
            }

            if (netMsg.callbackId != 0)
            {
                netMsg.Reply((short)MsgId.RequestSpawnStart, new RequestSpawnStartMsg()
                {
                    //If the UniqueID is not provided in the MSG it is generated by the spawner
                    //Should that be passed back and used here?

                    SceneName = message.SceneName,
                    NetworkAddress = SpawnerNetworkAddress,
                    UniqueID = message.UniqueID
                });
            }
        }

        private void CheckSpawnedProcessHealth()
        {
            //Check to see if a previously running process exited without warning
            foreach (RunningProcessStruct item in spawnerProcesses)
            {
                if (item.process.HasExited)
                {
                    UnityEngine.Debug.Log("Removing process that has exited");
                    spawnerProcesses.Remove(item);
                    return;
                }
            }
        }

        private void HandleKillSpawn(InsightNetworkMessage netMsg)
        {
            KillSpawnMsg message = netMsg.ReadMessage<KillSpawnMsg>();

            foreach (RunningProcessStruct process in spawnerProcesses)
            {
                if (process.uniqueID.Equals(message.UniqueID))
                {
                    process.process.Kill();
                    spawnerProcesses.Remove(process);
                    break;
                }
            }
        }

        private bool InternalStartNewProcess(RequestSpawnStartMsg spawnProperties)
        {
            if (spawnerProcesses.Count >= MaximumProcesses)
            {
                UnityEngine.Debug.LogError("[ProcessSpawner] - Maximum Process Count Reached");
                return false;
            }

            //If a UniqueID was not provided add one for GameResitration
            if (string.IsNullOrEmpty(spawnProperties.UniqueID))
            {
                spawnProperties.UniqueID = Guid.NewGuid().ToString();

                UnityEngine.Debug.LogWarning("[ProcessSpawner] - UniqueID was not provided for spawn. Generating: " + spawnProperties.UniqueID);
            }

            Process p = new Process();
            p.StartInfo.FileName = ProcessPath + ProcessName;
            //Args to pass: Port, Scene, UniqueID...
            p.StartInfo.Arguments = ArgsString() +
                " -NetworkAddress " + SpawnerNetworkAddress +
                " -NetworkPort " + (StartingNetworkPort + _portCounter) +
                " -SceneName " + spawnProperties.SceneName +
                " -UniqueID " + spawnProperties.UniqueID; //What to do if the UniqueID or any other value is null??

            if (p.Start())
            {
                print("[ProcessSpawner]: spawning: " + p.StartInfo.FileName + "; args=" + p.StartInfo.Arguments);

                //Increment port after sucessful spawn.
                _portCounter++;

                //If registered to a master. Notify it of the current thread utilization
                if (client != null)
                {
                    client.Send((short)MsgId.SpawnerStatus, new SpawnerStatusMsg() { CurrentThreads = spawnerProcesses.Count });
                }

                spawnerProcesses.Add(new RunningProcessStruct() { process = p, pid = p.Id, uniqueID = spawnProperties.UniqueID });
                return true;
            }
            else
            {
                UnityEngine.Debug.LogError("[ProcessSpawner] - Process Createion Failed.");
                return false;
            }
        }

        private static string ArgsString()
        {
            string[] args = System.Environment.GetCommandLineArgs();
            return args != null ? string.Join(" ", args.Skip(1).ToArray()) : "";
        }
    }

    [Serializable]
    public struct RunningProcessStruct
    {
        public Process process;
        public int pid;
        public string uniqueID;
    }
}
